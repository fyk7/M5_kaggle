見られた特徴について羅列

・商品が発売されていないときの価格を反映しない
・商品が値引きされてから、少しラグをおいて販売数が増加する
・月ごと、週ごとに売れ行きに周期性がありそう
・各州のいくつかの店舗で、店舗拡大などによる売り上げのjumpが確認される(これは特殊なのでこの影響は避けたい)
・店舗が休日の日は当たり前だが売り上げが0となるからこの影響をどう解決するか
・土日の売り上げが高い
・平日火曜から木曜までは売り上げが低いが、祝日は例外で高い
・1月の平日は有意に売り上げが低い（寒いから）->気温も特徴量にできる
・商品価格は店舗ごとに違ったりする
・単体の商品にまで絞り込んでしまうと相関性が見辛い
・同じカテゴリの商品でも売り上げに差がある
・dept_idで傾向が大きく異なる(hobby_1, とかfood_3とか)
・店舗ごとに売り上げが大きく異なる。->店舗ごとの特徴量は強いかも　->年齢層・平均収入・気温も特徴量になりそう
・GDPの増加率、金利も特徴量にできるかも
・1月の平日は有意に売り上げが低い（寒いから）
・月や週の周期性を考えるとちょうど１年前の結果に経済成長と店舗増設等のfloorの重みを加えるのが良さそう。
・州や店舗ごとにかなり傾向が違いそうであるから分けて考えたモデルを作っても良いかも
・アメリカの物価変動、ボーナス時期、walmart全体の傾向　+ 各店舗特有のもの（客層、平均気温、平均年収）
・rolling meanは移動平均線であるから周期性を表現している。
・カリフォルニアは宗教イベントで売り上げが下がる（豚肉とか？）->調べたらどうもカリフォルニアにはイスラム教が多い（シリコンバレーでインド人が多いから）
・ウィスコンシンはnational dayで有意に売り上げが下がる。
・ウィスコンシンではsnap day での売り上げが上がる(正直お金持ちが少ない？)
・snap dayは全体的に売り上げが10%程度上がる。
・snap dayではfoodの売り上げがよく上がる。
・5月27日	Memorial Day	戦没将兵追悼記念日	5月最終月曜。今回のコンペ期間のnational event
・４月１５日     Tax Day     所得税申告期限日
・５月第２日曜日     Mother's Day     母の日
・６月第３日曜日     Father's Day     父の日
・予想の最後ではbrexitが起きている(2016/6/15)
・小売売り上げ高も指標になる。
・店舗増設に伴う異常値をどのようにハンドリングするかを考察
・各州による特徴を表現し切れていない可能性がある
・ca2は2015頭に売り上げがドカンと上がっている。
・WI2は2016頭にドカンと売り上げが上がっている
・TXは基本的に安定している
・これらの特殊な州は別の扱いにする必要がある
・やはりどう考えても、時系列のcross validationが最も重要であると考えられる


以下がvalidationのイベント
・1918	2016-04-30	11614	Saturday	1	4	2016	d_1919	Pesach End	Religious	NaN	NaN	0	0	0
・1919	2016-05-01	11614	Sunday	2	5	2016	d_1920	OrthodoxEaster	Religious	NaN	NaN	1	1	0
・1923	2016-05-05	11614	Thursday	6	5	2016	d_1924	Cinco De Mayo	Cultural	NaN	NaN	1	1	1
・1926	2016-05-08	11615	Sunday	2	5	2016	d_1927	Mother's day	Cultural	NaN	NaN	1	0	1

以下がtestのイベント
・1948	2016-05-30	11618	Monday	3	5	2016	d_1949	MemorialDay	National	NaN	NaN	0	0	0
・1951	2016-06-02	11618	Thursday	6	6	2016	d_1952	NBAFinalsStart	Sporting	NaN	NaN	1	0	1
・1956	2016-06-07	11619	Tuesday	4	6	2016	d_1957	Ramadan starts	Religious	NaN	NaN	1	1	0
・1968	2016-06-19	11621	Sunday	2	6	2016	d_1969	NBAFinalsEnd	Sporting	Father's day	Cultural	0	0	0

・上記の8種類に特別な名前(カテゴリ)をつける

具体的なデータ操作
・前年度同時期の売り上げ数
・直前の価格変化（値下げから販売数増加にはタイムラグがある）
・各店舗で別々に分析
・前年度に販売していない商品は除外
・祝日は店舗が営業していない日はどう扱うか?
・snapがあるかないか
・急な店舗増設による影響をどのようになくすか
・1/1等の店舗休業日はdropしても良いかも
・店舗増設に伴う影響をどのように排除するのか？
・1年ごとの周期で予想するのが自然
・5年分の前年同月のデータをtrainにする。
・移動平均線を未来に移動した情報の重要度が高い
・販売価格のdiffをpd.shiftで下に持ってくると良さげ

・前年同月 x 5シーズンの結果を外装する回帰を実装
・lstmで各商品に対して適用しても良い
・ここで問題になるのは、クーポン適用日や祝日の特徴量をどのようにhandlingするかである。

・もし販売開始が期間の途中だった場合
・もし値下げをした週があった場合
・もし値段をx%下げた場合

・平均気温は間違いなく特徴量になる。

・移動平均の推移をベースとして、土日、snap, event, saleみ重みを持たせる。
・土日にフラグをつける。

・例外をどのように排除するのか？

・前処理大全のcross validationが使える。
・訓練期間を一定にした方がいいのか、増やした方がいいのかは要検証。
・問題は訓練期間と検証期間をどうするか


params = list(objective = "poisson",
              metric = "rmse",
              seed = 20,
              learning_rate = 0.1,
              alpha = 0.1,
              lambda = 0.1,
              num_leaves = 63,
              bagging_fraction = 0.66,
              bagging_freq = 1, 
              colsample_bytree = 0.77)
Rで成績が良かった人のlgbmのparam
・総じてrolling 30, 180, 7が最も寄与率が高い。
・priceの比率も意外と効く
・event2はほとんどないから消してしまってもいいかもしれない。
・
 model = lgb.train(params, train_set, num_boost_round = 2000, early_stopping_rounds = 200, valid_sets = [train_set, val_set], verbose_eval = 100)

p <- list(objective = "poisson",
          metric ="rmse",
          force_row_wise = TRUE,
          learning_rate = 0.075,
          sub_feature = 0.8,
          sub_row = 0.75,
          bagging_freq = 1,
          lambda_l2 = 0.1,
          nthread = 4)
・上記のparamsにis_weekendの特徴量を加えたカーネルの成績が0.5773と圧倒的に良かった。
m_lgb <- lgb.train(params = p,
                   data = xtr,
                   nrounds = 2000,
                   valids = list(valid = xval),
                   early_stopping_rounds = 400,
                   eval_freq = 200)

0.587
params = list(objective = "poisson",
              metric = "rmse",
              seed = 20,
              learning_rate = 0.08,
              lambda = 0.1,
              num_leaves = 63,
              bagging_fraction = 0.66,
              bagging_freq = 1, 
              colsample_bytree = 0.77)


・1/1のデータをdropする
・Rの好成績のfeatureをそのまま代入する。
・訓練の期間を前年度同期間 or ちょうど1年前から1年分


・lgbm特徴量
0.6094
features = [
    "item_id", "dept_id", "cat_id", "store_id", "state_id", "event_name_1", "event_type_1", "snap_CA", "snap_TX", "snap_WI", "sell_price", 
    "shift_t28", "rolling_std_t7", "rolling_std_t30", "rolling_std_t90", "rolling_std_t180", 
    "rolling_mean_t7", "rolling_mean_t30", "rolling_mean_t60", \
    "price_change_t1", "price_change_t365", "rolling_price_std_t7",
    "year", "month", "dayofweek",
]
付け加えるべき特徴量
is_weekend, quarter, year, price_change_7days
def prep_selling_prices(df):
    gr = df.groupby(["store_id", "item_id"])["sell_price"]
    df["sell_price_rel_diff"] = gr.pct_change()
    df["sell_price_roll_sd7"] = gr.transform(lambda x: x.rolling(7).std())
    df["sell_price_cumrel"] = (gr.shift(0) - gr.cummin()) / (1 + gr.cummax() - gr.cummin())
    df = reduce_mem_usage(df)
    return df


・R特徴量
0.5733
"store_id", "item_id", "wm_yr_wk"
lag_7, 28, 29
rolling lag_28に対して、7, 30, 90, 180
roll_max lag_28に対して、28
roll_var lag_28に対して、28
pricde_chage1, pricde_chage365
c("item_id", "state_id", "dept_id", "cat_id",
          "wday", "mday", "week", "month", "quarter", "year", "is_weekend",
          "snap_CA", "snap_TX", "snap_WI")

Thanks for sharing!
This notebook seems very simple and has only basic features.
Why does this have very good score? Maybe objective = "poisson" is important?
Poisson might do slightly better than regular regression, 
but I guess the main gain here is using forecasts to compute features within the 28 day prediction window.

salesが0の日が続く場合もあるし、salesがピークに張り付く場合もある。
これらの異常値をどのようにハンドリングするかが重要になってくる。
ARIMAをどのようにモデルに組み込んでいくかも要考察
いやどうもmoving averageのほうがrmseが小さいみたいだ
